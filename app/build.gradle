apply plugin: 'com.android.application'

android {
    signingConfigs {
        signConfig {
            keyAlias 'acquire'
            keyPassword 'password'
            storeFile file('C:/Users/Nilay/AndroidStudioProjects/AcquireSDK/acquire_sdk_key.jks')
            storePassword 'password'
        }
    }
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.acquire.sdk.app"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 4
        versionName "1.1.2"
    }
    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.signConfig
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
//    splits {
//        // Configures multiple APKs based on ABI.
//        abi {
//            // Enables building multiple APKs per ABI.
//            enable true
//
//            // By default all ABIs are included, so use reset() and include to specify that we only
//            // want APKs for x86, armeabi-v7a, and mips.
//            reset()
//
//            // Specifies a list of ABIs that Gradle should create APKs for.
//            include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
//
//            // Specifies that we want to also generate a universal APK that includes all ABIs.
//            universalApk true
//        }
//    }

}
//
//// Map for the version code that gives each ABI a value.
//ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]
//
//android.applicationVariants.all { variant ->
//
//    // Assigns a different version code for each output APK
//    // other than the universal APK.
//    variant.outputs.each { output ->
//
//        // Stores the value of ext.abiCodes that is associated with the ABI for this variant.
//        def baseAbiVersionCode =
//                // Determines the ABI for this variant and returns the mapped value.
//                project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
//
//        // Because abiCodes.get() returns null for ABIs that are not mapped by ext.abiCodes,
//        // the following code does not override the version code for universal APKs.
//        // However, because we want universal APKs to have the lowest version code,
//        // this outcome is desirable.
//        if (baseAbiVersionCode != null) {
//
//            // Assigns the new version code to versionCodeOverride, which changes the version code
//            // for only the output APK, not for the variant itself. Skipping this step simply
//            // causes Gradle to use the value of variant.versionCode for the APK.
//            output.versionCodeOverride =
//                    baseAbiVersionCode * 1000 + variant.versionCode
//        }
//    }
//}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation fileTree(dir: 'libs', include: ['*.aar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.2.0' // if not added already
    implementation 'androidx.emoji:emoji-appcompat:1.1.0' // if not added already
    implementation('io.socket:socket.io-client:1.0.0') {
        exclude group: 'org.json', module: 'json'
    }
    implementation 'com.acquireio:core:2.+'
    implementation 'com.squareup.picasso:picasso:2.71828'
    implementation "com.github.skydoves:colorpickerview:2.0.1"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'io.sentry:sentry-android:1.7.16'
    implementation 'androidx.browser:browser:1.2.0'
    implementation 'com.amitshekhar.android:android-networking:1.0.2'
    implementation 'pl.droidsonroids.gif:android-gif-drawable:1.2.20'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
}
